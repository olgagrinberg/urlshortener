# Application Configuration
spring.application.name=spring-boot-docker-app
server.port=8080

# Docker Compose Configuration
spring.docker.compose.enabled=true
spring.docker.compose.file=compose.yaml
spring.docker.compose.lifecycle-management=start_and_stop
spring.docker.compose.start.command=up
spring.docker.compose.stop.command=down
spring.docker.compose.profiles.active=default

# Database Configuration (Auto-configured by Docker Compose)
# These will be automatically set when Docker Compose starts
spring.datasource.url=jdbc:mariadb://localhost:3306/mydb
spring.datasource.username=root
spring.datasource.password=secret
spring.datasource.driver-class-name=org.mariadb.jdbc.Driver

# JPA Configuration
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true

# Redis Configuration (Auto-configured by Docker Compose)
spring.data.redis.host=localhost
spring.data.redis.port=6379
spring.data.redis.timeout=60000

# Logging Configuration
logging.level.com.urlshortener=INFO
# logging.level.org.springframework.boot.docker.compose=DEBUG
# logging.level.org.springframework.security=DEBUG
# logging.level.io.github.resilience4j=DEBUG
logging.level.com.urlshortener.controller=INFO

# Circuit Breaker Configuration
resilience4j.circuitbreaker.instances.userService.register-health-indicator=true
resilience4j.circuitbreaker.instances.userService.sliding-window-size=10
resilience4j.circuitbreaker.instances.userService.minimum-number-of-calls=5
resilience4j.circuitbreaker.instances.userService.permitted-number-of-calls-in-half-open-state=3
resilience4j.circuitbreaker.instances.userService.wait-duration-in-open-state=10s
resilience4j.circuitbreaker.instances.userService.failure-rate-threshold=50
resilience4j.circuitbreaker.instances.userService.event-consumer-buffer-size=10
resilience4j.circuitbreaker.instances.userService.automatic-transition-from-open-to-half-open-enabled=true

# Retry Configuration
resilience4j.retry.instances.userService.max-attempts=3
resilience4j.retry.instances.userService.wait-duration=1s
resilience4j.retry.instances.userService.enable-exponential-backoff=true
resilience4j.retry.instances.userService.exponential-backoff-multiplier=2
resilience4j.retry.instances.userService.retry-exceptions=org.springframework.dao.DataAccessException,java.sql.SQLException,org.springframework.data.redis.RedisConnectionFailureException


# Management endpoints for monitoring
# Actuator Configuration
management.endpoints.web.exposure.include=health,circuitbreakers,circuitbreakerevents,metrics
management.endpoint.health.show-details=always
management.health.circuitbreakers.enabled=true
management.simple.metrics.export.enabled=true

# application.properties or application.yml
server.shutdown=graceful
spring.lifecycle.timeout-per-shutdown-phase=30s


# Specifically disable SQL logging
# Disable JPA/Hibernate startup messages
logging.level.org.hibernate.engine.internal.StatisticalLoggingSessionEventListener=OFF


# Disable SQL queries
logging.level.org.hibernate.SQL=OFF

# Disable parameter binding logs (the ? values)
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=OFF

# Disable result set extraction logs
logging.level.org.hibernate.type.descriptor.sql.BasicExtractor=OFF

